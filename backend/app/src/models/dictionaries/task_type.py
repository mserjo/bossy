# backend/app/src/models/dictionaries/task_type.py
# -*- coding: utf-8 -*-
"""
Цей модуль визначає модель SQLAlchemy `TaskTypeModel` для довідника "Типи завдань/подій".
Типи завдань використовуються для класифікації завдань та подій в системі,
наприклад, "завдання", "підзавдання", "подія", "штраф". Це може впливати на логіку обробки,
нарахування бонусів, відображення тощо.

Модель `TaskTypeModel` успадковує `BaseDictModel`, що надає їй стандартний набір полів
(id, name, description, code, state_id, group_id, created_at, updated_at, deleted_at, is_deleted, notes)
та функціональність.
"""

from sqlalchemy import UniqueConstraint # type: ignore # Для визначення обмежень унікальності
# from sqlalchemy.orm import relationship # type: ignore # Для визначення зв'язків, наприклад, з TaskModel

from backend.app.src.models.dictionaries.base import BaseDictModel # Імпорт базової моделі для довідників

# TODO: Визначити, чи потрібні специфічні поля для моделі TaskTypeModel, окрім успадкованих.
# Наприклад, чи є цей тип завданням (потребує виконання) чи подією (настає автоматично),
# чи може мати негативні бонуси (штраф).

class TaskTypeModel(BaseDictModel):
    """
    Модель для довідника "Типи завдань/подій".

    Атрибути:
        id (uuid.UUID): Унікальний ідентифікатор типу завдання (успадковано).
        name (str): Назва типу завдання (наприклад, "Звичайне завдання", "Подія") (успадковано).
        description (str | None): Детальний опис типу завдання (успадковано).
        code (str): Унікальний символьний код типу завдання (наприклад, "task", "event", "penalty") (успадковано).
        state_id (uuid.UUID | None): Ідентифікатор стану запису типу завдання (успадковано, використання під питанням).
        group_id (uuid.UUID | None): Ідентифікатор групи, якщо тип завдання специфічний для групи (успадковано).
                                     Зазвичай типи завдань є глобальними, але можливі кастомні типи в групах.
        created_at (datetime): Дата та час створення запису (успадковано).
        updated_at (datetime): Дата та час останнього оновлення запису (успадковано).
        deleted_at (datetime | None): Дата та час "м'якого" видалення запису (успадковано).
        is_deleted (bool): Прапорець, що вказує, чи запис "м'яко" видалено (успадковано).
        notes (str | None): Додаткові нотатки (успадковано).

    Ім'я таблиці в базі даних: `task_types`.
    """
    __tablename__ = "task_types"

    # Обмеження унікальності для поля `code`.
    # Гарантує, що кожен символьний код типу завдання є унікальним (глобально або в межах групи).
    # TODO: Уточнити вимоги до унікальності кодів типів завдань.
    # Поки що робимо `code` унікальним глобально.
    __table_args__ = (
        UniqueConstraint('code', name='uq_task_types_code'),
        # Типи завдань можуть бути глобальними або специфічними для групи.
        # Якщо специфічні для групи, то унікальність (group_id, code).
        # Поки що `code` глобально унікальний.
        # TODO: Переглянути, якщо типи завдань будуть залежати від груп.
    )

    # --- Зворотні зв'язки (Relationships) ---
    # Зв'язок з TaskModel (завдання, що мають цей тип)
    # TODO: Узгодити back_populates="task_type" з TaskModel
    tasks_of_this_type = relationship("TaskModel", back_populates="task_type", foreign_keys="[TaskModel.task_type_id]")

    # TODO: Розглянути додавання булевих прапорців для визначення характеристик типу завдання:
    # is_event (bool): True, якщо це подія (не потребує активного виконання), інакше False (це завдання).
    # is_penalty (bool): True, якщо цей тип передбачає штраф (негативні бонуси).
    # can_have_subtasks (bool): True, якщо завдання цього типу може мати підзавдання.
    # from sqlalchemy import Boolean, Column
    # is_event: Column[bool] = Column(Boolean, default=False, nullable=False)
    # default_bonus_type: Column[str] = Column(String, nullable=True) # Наприклад, 'positive', 'negative'

    def __repr__(self) -> str:
        """
        Повертає рядкове представлення об'єкта моделі TaskTypeModel.
        Наприклад: <TaskTypeModel(id='...', name='Подія', code='event')>
        """
        return f"<{self.__class__.__name__}(id='{self.id}', name='{self.name}', code='{self.code}')>"

# Приклади початкових даних для довідника типів завдань (згідно technical-task.md):
# - завдання (code: 'task', name: 'Завдання')
# - підзавдання (code: 'subtask', name: 'Підзавдання')
# - складне завдання (code: 'complex_task', name: 'Складне завдання') - можливо, це характеристика, а не тип
# - командне завдання (code: 'team_task', name: 'Командне завдання')
# - подія (code: 'event', name: 'Подія')
# - штраф (code: 'penalty', name: 'Штраф') - може бути як окремий тип, або характеристика завдання/події

# TODO: Перевірити відповідність `technical-task.md` та `structure-claude-v3.md`.
# `BaseDictModel` надає необхідні поля. `group_id` успадковано для можливих кастомних типів.
# Назва таблиці `task_types` відповідає структурі.
# Унікальність `code` встановлена.
# Специфічні поля (наприклад, `is_event`) можуть бути додані для розширення функціоналу.
# Потрібно узгодити, чи "складне завдання" та "командне завдання" є окремими типами,
# чи це атрибути звичайного завдання. Поки що включені як типи для гнучкості.
# "Штраф" також може бути атрибутом або окремим типом.
