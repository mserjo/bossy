# backend/app/src/services/base.py
# -*- coding: utf-8 -*-
"""
Цей модуль визначає базовий клас `BaseService`, від якого можуть успадковуватися
інші сервіси в додатку.

На даний момент, цей базовий клас може бути мінімальним, оскільки багато
спільної логіки (наприклад, CRUD операції) вже інкапсульовано в `BaseRepository`.
Сервіси більше відповідають за специфічну бізнес-логіку та оркестрацію.

Можливі елементи для `BaseService` в майбутньому:
- Ініціалізація логера.
- Спільні методи для валідації або перевірки прав доступу (хоча це часто
  виноситься в окремі утиліти або залежності FastAPI).
- Загальні залежності, які потрібні багатьом сервісам (наприклад, доступ до
  поточного користувача, хоча це теж зазвичай передається в методи сервісів).
"""

from typing import TypeVar, Generic
from sqlalchemy.ext.asyncio import AsyncSession # type: ignore # Для типізації db сесії

from backend.app.src.repositories.base import ModelType # Використовуємо ModelType з base repository
from backend.app.src.config.logging import logger # Використання спільного логера

# Типова змінна для репозиторію, з яким працює сервіс
RepositoryType = TypeVar("RepositoryType")

class BaseService(Generic[RepositoryType]):
    """
    Базовий клас для сервісів.

    Атрибути:
        repository (RepositoryType): Екземпляр репозиторію, який використовується сервісом
                                     для доступу до даних.
    """
    def __init__(self, repository: RepositoryType):
        """
        Конструктор базового сервісу.

        :param repository: Репозиторій, асоційований з цим сервісом.
        """
        self.repository: RepositoryType = repository
        self.logger = logger # Кожен сервіс-наслідник матиме доступ до логера

    # Приклад спільного методу (якщо потрібен):
    # async def check_permission(self, current_user: UserModel, required_permission: str) -> bool:
    #     """
    #     Перевіряє, чи має поточний користувач необхідний дозвіл.
    #     (Це приклад, реалізація системи дозволів може бути складнішою).
    #     """
    #     # ... логіка перевірки дозволів ...
    #     self.logger.info(f"Перевірка дозволу '{required_permission}' для користувача {current_user.id}")
    #     # if required_permission not in current_user.get_permissions(): # Приклад
    #     #     return False
    #     return True

    # TODO: Визначити, чи потрібні тут якісь спільні методи для всіх сервісів.
    #       На даний момент, основна мета цього класу - надати спільну точку
    #       для успадкування та, можливо, ініціалізації логера або інших
    #       загальних інструментів.
    #       Також, типізація `repository` через Generic може бути корисною.

    # Зауваження: Сесія бази даних (`db: AsyncSession`) зазвичай передається
    # як аргумент у кожен метод сервісу, який взаємодіє з БД (через репозиторій),
    # а не зберігається як атрибут екземпляра сервісу. Це відповідає
    # патерну FastAPI, де сесія керується залежністю `Depends(get_db_session)`
    # для кожного запиту.

# Все виглядає добре для початкового базового сервісу.
# Він надає логер та типізований атрибут репозиторію.
# Подальші спільні методи можуть бути додані за потреби.
