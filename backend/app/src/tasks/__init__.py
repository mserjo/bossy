# backend/app/src/tasks/__init__.py
# -*- coding: utf-8 -*-
"""
Ініціалізаційний файл для пакету 'tasks' (фонові завдання).

Цей пакет відповідає за визначення та конфігурацію фонових завдань,
які виконуються асинхронно від основного потоку обробки HTTP-запитів.
Це можуть бути завдання, що виконуються за розкладом (cron-подібні)
або запускаються у відповідь на певні події в системі.

Приклади фонових завдань:
- Відправка email/SMS сповіщень.
- Періодичне очищення старих даних (логи, сесії).
- Створення резервних копій.
- Синхронізація даних з зовнішніми сервісами.
- Перерахунок рейтингів, видача досягнень.
- Обробка довготривалих операцій.

Для реалізації фонових завдань можуть використовуватися:
- Celery (з Celery Beat для періодичних завдань).
- FastAPI BackgroundTasks (для простих завдань, що не потребують окремого воркера).
- APScheduler (для завдань за розкладом в межах одного процесу).

Цей файл робить каталог 'tasks' пакетом Python. Він може також
ініціалізувати конфігурацію планувальника (наприклад, Celery Beat з `scheduler.py`)
або експортувати основні функції для запуску завдань.
"""

# TODO: Імпортувати та, можливо, ініціалізувати компоненти для фонових завдань.

# Якщо використовується Celery:
# from .celery_app import celery_app # Припускаючи, що celery_app визначається в celery_app.py
# from .scheduler import setup_periodic_tasks # Функція для налаштування періодичних завдань Celery Beat

# __all__ = [
# "celery_app",
# "setup_periodic_tasks",
# ]

# Якщо використовуються FastAPI BackgroundTasks, то завдання визначаються
# безпосередньо в сервісах або ендпоінтах і не потребують централізованого експорту тут,
# але цей пакет все одно може містити логіку самих фонових функцій.

# Якщо використовується APScheduler, тут може бути ініціалізація планувальника.
# from apscheduler.schedulers.asyncio import AsyncIOScheduler
# scheduler = AsyncIOScheduler()
# def start_scheduler():
#     from . import scheduled_jobs # Імпорт файлу, де додаються завдання до планувальника
#     scheduler.start()
#
# __all__ = ["scheduler", "start_scheduler"]


# На даний момент, поки конкретна реалізація не обрана або не налаштована,
# файл може залишатися таким.
# Важливо, щоб `scheduler.py` (якщо є) та інші файли завдань
# (в підкаталогах `system/`, `notifications/` тощо) були правильно структуровані.
pass
