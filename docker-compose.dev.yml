# docker-compose.dev.yml
# Конфігурація Docker Compose для середовища розробки.
# Розширює або перевизначає налаштування з основного `docker-compose.yml`.
# Запускати за допомогою: `docker-compose -f docker-compose.yml -f docker-compose.dev.yml up`

version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev # Використовуємо Dockerfile для розробки
    # Порт для backend в режимі розробки (може бути той самий, що й у prod, якщо не конфліктує)
    # Якщо APP_PORT_HOST визначено в .env, він буде використаний.
    # Тут ми можемо явно перевизначити, якщо потрібно інший порт для dev.
    # ports:
    #   - "${APP_PORT_HOST_DEV:-8001}:${APP_PORT:-8000}" # Приклад іншого порту на хості для dev

    volumes:
      # Монтуємо код backend в контейнер для hot-reloading.
      # Шлях ./backend на хост-машині (де знаходиться цей docker-compose файл)
      # монтується в /opt/app в контейнері (де WORKDIR в Dockerfile.dev).
      - ./backend:/opt/app
      # Можна виключити певні каталоги, якщо вони важкі і не потрібні для hot-reload,
      # наприклад, .git, __pycache__, .pytest_cache, venv (якщо він створюється локально).
      # volumes:
      #   - ./backend:/opt/app:rw # rw - read-write (за замовчуванням)
      #   # Приклад виключення з монтування (залежить від версії Docker Compose)
      #   # Для Docker Compose v2.1+ можна використовувати більш складні конструкції
      #   # або просто не монтувати те, що не потрібно (наприклад, .git ігнорується через .dockerignore)
      #   # - /opt/app/.git # Це не працюватиме для виключення, потрібен .dockerignore
      #   # - /opt/app/__pycache__
      #   # - /opt/app/.pytest_cache
      #   # - /opt/app/venv # Якщо venv створюється локально і не потрібен в контейнері

    # Команда запуску може бути перевизначена тут, якщо потрібно,
    # але зазвичай CMD з Dockerfile.dev (з --reload) є достатньою.
    # command: uvicorn app.main:app --host 0.0.0.0 --port ${APP_PORT:-8000} --reload --reload-dir /opt/app/app
    # --reload-dir можна вказати, якщо потрібно стежити лише за певним каталогом.
    # За замовчуванням Uvicorn стежить за всім PYTHONPATH.

    environment:
      - APP_ENV=development # Явно вказуємо середовище розробки
      - APP_DEBUG=True
      # Можна додати інші змінні, специфічні для dev, наприклад, для підключення до локальної БД,
      # якщо вона не в Docker, або для дебаггерів.
      # - DB_HOST=host.docker.internal # Для підключення до БД на хост-машині з контейнера (залежить від ОС Docker)

    # Healthcheck для dev може бути менш строгим або відключеним,
    # оскільки сервіс часто перезапускається.
    # Якщо healthcheck з основного файлу заважає, його можна вимкнути:
    # healthcheck:
    #   disable: true
    # Або залишити як є.

  # postgres_db:
    # Можна перевизначити порт для postgres_db на хості, якщо потрібно уникнути конфліктів.
    # ports:
    #   - "5434:5432" # Приклад: 5434 на хості для dev БД

  # redis_cache:
    # Аналогічно для Redis.
    # ports:
    #   - "6381:6379"

# Для розробки томи (volumes) для даних postgres_data та redis_data
# зазвичай залишаються такими ж, як у базовому docker-compose.yml,
# щоб дані зберігалися між запусками.
# Якщо потрібні "чисті" дані для кожного запуску dev, можна використовувати
# анонімні томи або видаляти іменовані томи перед `up`.

# Мережа (networks) також зазвичай успадковується з основного файлу.

# TODO: Уточнити, чи потрібні специфічні команди запуску або змінні середовища для dev.
# TODO: Перевірити шляхи монтування томів (`./backend:/opt/app`), щоб вони відповідали
#       структурі проекту та WORKDIR в `Dockerfile.dev`.
#       Якщо `docker-compose.dev.yml` знаходиться в корені проекту, а `Dockerfile.dev`
#       в `backend/`, то шлях до контексту збірки та монтування коду буде правильним.
# TODO: Якщо використовуються інші сервіси для розробки (наприклад, MailHog для перехоплення email),
#       їх можна додати сюди.
# TODO: Розглянути використання `.dockerignore` файлу в каталозі `backend/`
#       для виключення непотрібних файлів/каталогів з контексту збірки Docker образу
#       (наприклад, `.git`, `__pycache__`, `venv`, `.vscode`, `.idea`).
#       Це зменшить розмір контексту та може пришвидшити збірку.
#       Для монтованих томів `.dockerignore` не діє, але він важливий для `COPY` в Dockerfile.
